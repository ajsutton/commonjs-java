{{!
* Copyright 2016 Adrian Sutton
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
}}
var require = (function(moduleDefinitions) {
    var moduleCache = {};
    function require(moduleId) {
        if (moduleId === undefined || moduleId === null) {
            return undefined;
        }
        if (moduleCache[moduleId]) {
            return moduleCache[moduleId];
        }
        return defineModule(moduleId);
    }

    function defineModule(moduleId) {
        var module = { id: moduleId, exports: {} };
        moduleDefinitions[moduleId].call(undefined, module, module.exports, function(requestedId) {
            return require(resolveModuleId(requestedId, moduleId));
        });
        moduleCache[moduleId] = module.exports;
        return module.exports;
    }

    function resolveModuleId(requestedId, moduleId) {
        if (requestedId === null || requestedId === undefined) {
            return undefined;
        }
        if (requestedId.startsWith("./")) {
            return moduleId.substring(0, Math.max(0, moduleId.lastIndexOf('/'))) + '/' + requestedId.substring(2);
        } else if (requestedId.startsWith("../")) {
            var moduleIdParts = moduleId.split('/');
            moduleIdParts.pop();
            while (requestedId.startsWith("../")) {
                requestedId = requestedId.substring("../".length);
                moduleIdParts.pop();
            }
            return moduleIdParts.join('/') + requestedId;
        }
        return requestedId;
    }

    return require;
})({
{{#modules}}
    '{{moduleId}}': function(module, exports, require) {
    {{{source}}}
    },
{{/modules}}
});

{{#requestedModules}}
    require('{{.}}');
{{/requestedModules}}
